<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Return to laughter</title>
    <link>https://blog.jxtsai.info/categories/blogging/index.xml</link>
    <description>Recent content on Return to laughter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <atom:link href="https://blog.jxtsai.info/categories/blogging/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>如何更換jekyll 主題</title>
      <link>https://blog.jxtsai.info/2016/10/31/jekyll-theme</link>
      <pubDate>Mon, 31 Oct 2016 12:09:00 +0000</pubDate>
      
      <guid>https://blog.jxtsai.info/2016/10/31/jekyll-theme</guid>
      <description>&lt;p&gt;幾個月前，初次接觸「靜態網頁產生器」(static pages generator)，是從jekyll開始才注意到這個東東。接著幾個月中陸續再試玩了hugo, pelican, gitbook, hexo等其它同類型的架站軟體。這一路觀察與體驗下來，雖然使用jekyll來架各式網站或部落格高手最多，其名列了github open sources Static page generator 關注度、使用度最高的第一名，但對於我這名低手幾個月來和它博鬥的經驗總結來說，並不建議沒有任何電腦編程基礎的使用者利用它來作為網站架設的後台工具，理由是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安裝時可能會被ruby的版本以及其套件管理平台gem給搞瘋。&lt;/li&gt;
&lt;li&gt;就算成功完成了jekyll 在本地端電腦上的安裝運行，但接下來的調校工作，尤其是主題模版更換，很難找得到「新手」看得懂的文件說明。

對於第一個問題，我在之前記錄jekyll的&lt;a href=&#34;http://self.jxtsai.info/2016/04/jekyll.html&#34;&gt;部落格文章&lt;/a&gt;簡單地解決了。而這篇文章，則是希望能寫出最平易白話的jekyll更換主題中文介紹,好讓網頁建置或網站佈署有更多元的選擇。至於為什麼目前從google搜尋引擊中，一直沒找到容易看得懂的指引介紹，我個人私自猜測jekyll使用者多是有一定程度的程式碼能力，故他們認為這種理所當然的方法，根本沒什麼做成技術文件的必要吧。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先前提假設,已經通過了ruby/gem安裝考驗，成功地在本機電腦端上裝設好了jekyll。故只要在命令列下新建網站專案指令：
&lt;code&gt;$jekyll new mysite #mysite為新網站專案名稱，可自取&lt;/code&gt;
電腦即會自動產生一個「mysite」資料夾，其底下有一些必要的檔案與目錄，也就是一個全新的網站。
&lt;img src=&#34;https://i.imgur.com/SKYKmMk.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;若執行了jekyll 伺服器指令(&lt;code&gt;mysite$bundle exec jekyll server&lt;/code&gt;)後，打開瀏覧器可看到新網站的模樣，此時套用的是jekyll系統預設的主題：minima
&lt;img src=&#34;https://i.imgur.com/k1S1nuP.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接下來同樣在文字指令環境下，打入：
&lt;code&gt;$jekyll new-theme mynewtheme #mynewtheme為自取的主題名稱&lt;/code&gt;
這時電腦又會自動生成一個「mynewtheme」資料夾，其目錄結構如下：
&lt;img src=&#34;https://i.imgur.com/j7ahb7W.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;把「mysite」底下的東西全部複製搬移到「mynewtheme」底下，此時在「mynewtheme」的工作目錄下，再打入jekyll 伺服器指令&lt;code&gt;mysite$bundle exec jekyll server&lt;/code&gt;，這時候會看到一個最原始還未加入任何CSS模版設計與圖片的初胚網站。
&lt;img src=&#34;https://i.imgur.com/5SLZFcl.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;找到自己看中意的jekyll theme，通常只要搜尋關鍵字，就會有許多豐富的網站，例如我google結果的前三名：
+ &lt;a href=&#34;http://themes.jekyllrc.org/&#34;&gt;themes.jekyllrc.org&lt;/a&gt;
+ &lt;a href=&#34;http://jekyllthemes.org/&#34;&gt;jekyllthemes.org&lt;/a&gt;
+ &lt;a href=&#34;https://jekyllthemes.io&#34;&gt;jekyllthemes.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;挑選好之後，可以透過：手動下載zip檔案，或是git clone 原始碼到本地端的電腦上。例如我挑選了一個： &lt;a href=&#34;http://jekyllthemes.org/themes/Jekyll-Stepbystep/&#34;&gt;Stepbystep主題&lt;/a&gt;，下戴其zip檔解壓後，先稍閱讀一下其安裝指南（readme.md）看看有什麼該注意的事項。接下來我是把「Stepbystep」資料夾內的東西全部複製移動到「mynewtheme」。當前工作目錄在「mynewtheme」，利用bundle exec執行jekyll 伺服器命令，沒遇上什麼阻礙順利地讓它跑起來。
&lt;img src=&#34;https://i.imgur.com/t1ETZng.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;這時候打開瀏覧器，輸入jekyll本地預設網址&lt;a href=&#34;http://127.0.0.1:4000&#34;&gt;http://127.0.0.1:4000&lt;/a&gt; ，耶終於順利更換了jekyll 網站主題。原來更換主題看似也不算太難嘛，那到底之前我東搞西補地探索了兩三個星期是在幹什麼啊(╯-_-)╯ ~╩╩
&lt;img src=&#34;https://i.imgur.com/zKDErjg.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;至於許多細部微調，得要再一一修改_config.yml等檔案。&lt;/p&gt;

&lt;p&gt;其它參考資源：
&lt;a href=&#34;http://jekyllrb.com/docs/themes/&#34;&gt;jekyll 官網說明&lt;/a&gt;
&lt;a href=&#34;http://www.jokinkuang.info/2016/09/03/how-to-create-the-jekyll-theme.html&#34;&gt;一步一步创建Jekyll主题&lt;/a&gt;
&lt;a href=&#34;https://fraserxu.me/2013/06/02/change-jekyll-blog-layout-in-ten-minutes/&#34;&gt;教你10分鐘內替換Jekyll博客樣式&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新站啟用</title>
      <link>https://blog.jxtsai.info/2016/10/24/hugo-site</link>
      <pubDate>Mon, 24 Oct 2016 11:14:00 +0000</pubDate>
      
      <guid>https://blog.jxtsai.info/2016/10/24/hugo-site</guid>
      <description>&lt;p&gt;之前試用了幾款靜態網頁生成器，並相繼把其安裝與使用簡介記錄下來。最近才發現早有一個整理了github上面受歡迎的&lt;a href=&#34;https://www.staticgen.com/&#34;&gt;開源靜態網頁生成器&lt;/a&gt;網站，的確是蠻一目了然的實用指南。
&lt;img src=&#34;https://i.imgur.com/cBJrokm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;例如之前試過的jekyll就是其中排名第一（以得到星號、觀注度和fork次數計算）的靜態網頁生成器。從這個網站，我才知道之前曾試用的gitbook原來也是一個開源專案，除了提供網頁版的電子書線上編輯與作品發表外，另有客戶端的套件可下載安裝，讓使用者可以在自己的電腦端安裝gitbook-cli後即可以利用自己習慣愛用的純文字編輯器來寫作文本,再將之發佈到網路上。此單機版雖然理論上可以佈署在某個雲端虛擬機器上來運行，但似乎無法如gitbook網頁版支援多人協同編輯工作，不過其優點在於可以自行調校需要的版型與應用外掛功能（原來gitbook志願者開發的外掛已多達近500個！！）
&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;看到這麼多靜態網頁生成器的出現，讓我更動心地想把markdown語法練熟一點，慢慢調整自己的寫作習慣單純地回歸純文字環境而不必啟動太複雜的版面排列編輯器，也逐步減少在blogger.com　/wordpress 後台寫部落格草稿的麻煩，因為每一次存檔的post request都似乎是一趟趟本地與雲端機器之間來回回應的時間與能源耗損（是真的有這麼計較嗎？）&lt;/p&gt;

&lt;h5 id=&#34;blogger-wordpress-xml備份文件的轉檔&#34;&gt;blogger/ wordpress xml備份文件的轉檔&lt;/h5&gt;

&lt;p&gt;有些囑目度較高的靜態網頁生成器如jekyll/ hugo,已有熱心的支持者協助開發了從blogger/ wordpress等平台跳船改泊的方法。例如我個人即是參考這篇文章的作法&lt;a href=&#34;https://samaxes.com/2016/02/static-site-from-wordpress-to-hugo/&#34;&gt;Moving to a Static Website, part 1: From WordPress to Hugo&lt;/a&gt;,將blogger上近700篇的文章順利自動轉成了markdown格式。因為其中還有許多圖片與連結要作修改，在今年六月部落格搬了一次家的勞心動作後，短期內不會再花時間一一地修改這些MD文件，只是把它們安心地放在個人電腦的硬碟裏存檔備份。&lt;/p&gt;

&lt;h5 id=&#34;markdown語法的練習&#34;&gt;markdown語法的練習&lt;/h5&gt;

&lt;p&gt;網路上不少markdonw語法入門皆提到，應用md語法的優點，仍在於讓寫作者單純地利用鍵盤直接記下版型指令，讓寫作者可先專心於文本內容的流𣈱書寫，先不須煩心頻繁切換到滑鼠啟動文書編輯軟體複雜的功能面版。其實我本來就不太愛用word文件編輯軟體，尤其痛恨它在不同版本與載具中就會曝露自身夾帶許多莫名奇妙的隱藏肥大編碼，更別提其隨著商業公開版本的不斷更新，新版文件無法相容相見於舊版軟體的尷尬囧境。所以這篇：指南利用純文字寫作&lt;a href=&#34;http://www.jianshu.com/p/qqGjLN&#34;&gt;為何作家應該用markdown保存自己的文稿&lt;/a&gt;　真是說中了我的心情啊。&lt;/p&gt;

&lt;p&gt;至於學習語法最好的方式，除了先從簡單的認識入門，不妨試用者幾篇文件來編輯ＭＤ語法：
+ &lt;a href=&#34;http://www.jianshu.com/p/2d1768785661&#34;&gt;第一步：学习Markdown语法编辑概要&lt;/a&gt;
+ &lt;a href=&#34;http://wowubuntu.com/markdown/index.html#link&#34;&gt;Markdown 语法说明&lt;/a&gt; (简体中文版)&lt;/p&gt;

&lt;p&gt;雖然任何純文字編輯器都可以用來作md文件的編輯器。我個人最喜愛用的是sublime text，但其中文輸入支援不佳，故在寫中文時我多使用ubuntu內鍵的text editor。最近從這篇文章的介紹:&lt;a href=&#34;http://www.arthurtoday.com/2015/04/6-markdown-editors-for-ubuntu-linux.html&#34;&gt;Ubuntu 六款 Markdown 編輯器快速試用心得&lt;/a&gt;,另外下載了&lt;a href=&#34;http://pad.haroopress.com&#34;&gt;haroopad&lt;/a&gt;使用，其優點在於提供了文件預覧功能，會比單純地在text editor文字編輯器上工作方便地知識打入的語法是否正確呈現。
&lt;img src=&#34;https://i.imgur.com/4gHFK5c.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果要使用markdown線上編輯服務，過去我偶而會使用的是hackpad，但個人不太喜歡它被dropbox收購後，其文件閱讀被整合成dropbox paper的樣式，故近日來改採用&lt;a href=&#34;http://hackmd.io&#34;&gt;hackmd.io&lt;/a&gt;的線上文件編輯，可惜它目前的線上協同合作功能暫時還比不上hackpad。&lt;/p&gt;

&lt;h5 id=&#34;新站啟用&#34;&gt;新站啟用&lt;/h5&gt;

&lt;p&gt;既然橫下心想要多採用MD寫作與保持文檔了，未來blogger也不會再作更新，畢竟同一文章卻得在不同格式之間地貼來貼去還真是蠻麻煩的，且我的部落格瀏覧量向來很低，尤其在社群社交網站當道的年代中自己並不使用臉書，如此在台灣逐漸被臉書單一化的網路應用層世界裏，一直乏人問津。不過書寫本身是一件蠻有趣的事，在數位時代中可以胡亂實驗各種平台或寫作方式，探索各種不斷開發前進的網頁技術變化，這些始終是我接觸互聯網世界以來最大樂趣之一，所以我當然還是會繼續公開地分享一些以文字為主的記錄。blogger有另一個網路大神當靠山，但blogger自定網域卻無法提供ssl支援，這點讓我心裏蠻介意不痛快的，更別提其最近又&lt;a href=&#34;https://www.propublica.org/article/google-has-quietly-dropped-ban-on-personally-identifiable-web-tracking&#34;&gt;默默修改用戶隱私條款&lt;/a&gt;的作法，讓我想逐步脫離對其依賴（果然是難相處啊我）。之後&lt;a href=&#34;http://self.jxtsai.info&#34;&gt;blogger.com&lt;/a&gt;上面只會保留來作舊文的存檔連結，未來網路寫作的發佈平台會轉向利用hugo作成,存放在github的空間: &lt;a href=&#34;https://blog.jxtsai.info&#34;&gt;https//:blog.jxtsai.info&lt;/a&gt;。(其實比較想存放在開源的gitlab，但一直看不懂它的ci設定方法)&lt;/p&gt;

&lt;h5 id=&#34;靜態網頁生成器的精進修練&#34;&gt;靜態網頁生成器的精進修練&lt;/h5&gt;

&lt;p&gt;雖然看似有這麼多各家語言寫成的靜態網頁生成器，可以在彈指之間就架好一個可發佈的網站內容，但是若想調校出與眾不同的模版樣式，就得花時間在摸熟CSS/SASS，一整個就是人生沒有捷徑可以偷懶的感覺啊。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>